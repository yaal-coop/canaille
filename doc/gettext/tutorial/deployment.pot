# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Yaal Coop
# This file is distributed under the same license as the canaille package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: canaille 0.0.56\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 17:26+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorial/deployment.rst:2
#: a7ef8cd4696b4e53a1ffdb87fb18c375
msgid "Deployment"
msgstr ""

#: ../tutorial/deployment.rst:5
#: 0f1f7c0caa8a4dfcb659c15bedda5aae
msgid "Application service"
msgstr ""

#: ../tutorial/deployment.rst:7
#: b93527ef33ad4a65af273da09bb780f3
msgid "After having finished Canaille installation you have to run it in a WSGI application server. Here are some WSGI server configuration examples you can pick. Do not forget to update the paths."
msgstr ""

#: ../tutorial/deployment.rst:11
#: 1ffbe89a8ff744fc9686484ce526e541
msgid "gunicorn"
msgstr ""

#: ../tutorial/deployment.rst:13
#: 418a0ab3603442f2b0a515962f003029
msgid "Todo"
msgstr ""

#: ../tutorial/deployment.rst:15
#: c40ad558fd584c01a6c564f8f72d12f3
msgid "Write a gunicorn configuration sample file."
msgstr ""

#: ../tutorial/deployment.rst:18
#: ec3a0c7c05b74be6b1640ff6a4090aec
msgid "uwsgi"
msgstr ""

#: ../tutorial/deployment.rst:42
#: 5c4862bc3810432195a2e9a353f60b54
msgid "Webserver"
msgstr ""

#: ../tutorial/deployment.rst:44
#: 94e56452db9741f0a3eee45f672e73a8
msgid "Now you have to plug your WSGI application server to your webserver so it is accessible on the internet. Here are some webserver configuration examples you can pick:"
msgstr ""

#: ../tutorial/deployment.rst:48
#: 7c4ae615fbd44c3f8ab3ece2d0201ed7
msgid "Nginx"
msgstr ""

#: ../tutorial/deployment.rst:114
#: ac66da9f7d1342bdad81dbdf97218b4e
msgid "Apache"
msgstr ""

#: ../tutorial/deployment.rst:153
#: ad13e4fdf804422facdde8b1b619e9a2
msgid "Recurrent jobs"
msgstr ""

#: ../tutorial/deployment.rst:155
#: b9ba07959e7f4d57846b44490735d913
msgid "You might want to clean up your database to avoid it growing too much. You can regularly delete expired tokens and authorization codes with:"
msgstr ""

#: ../tutorial/deployment.rst:164
#: 4a9929824eba46a883f1147dcdaa526e
msgid "Webfinger"
msgstr ""

#: ../tutorial/deployment.rst:166
#: cbd15001d4a043e5a0ec93a5eff80b9f
msgid "You may want to configure a `WebFinger`_ endpoint on your main website to allow the automatic discovery of your Canaille installation based on the account name of one of your users. For instance, suppose your domain is ``mydomain.example`` and your Canaille domain is ``auth.mydomain.example`` and there is a user ``john.doe``. A third-party application could require to authenticate the user and ask them for a user account. The user would give their account ``john.doe@mydomain.example``, then the application would perform a WebFinger request at ``https://mydomain.example/.well-known/webfinger`` and the response would contain the address of the authentication server ``https://auth.mydomain.example``. With this information the third party application can redirect the user to the Canaille authentication page."
msgstr ""

#: ../tutorial/deployment.rst:168
#: e515d97f8d8248f98081746a9b723611
msgid "The difficulty here is that the WebFinger endpoint must be hosted at the top-level domain (i.e. ``mydomain.example``) while the authentication server might be hosted on a sublevel (i.e. ``auth.mydomain.example``). Canaille provides a WebFinger endpoint, but if it is not hosted at the top-level domain, a web redirection is required on the ``/.well-known/webfinger`` path."
msgstr ""

#: ../tutorial/deployment.rst:170
#: 3c7cb4cd4a2d498098fe4387a5ae3b2a
msgid "Here are configuration examples for Nginx or Apache:"
msgstr ""

#: ../tutorial/deployment.rst:172
#: a11ff6002ffc46b7b401b29c222cb984
msgid "Nginx webfinger configuration for a top level domain"
msgstr ""

#: ../tutorial/deployment.rst:181
#: cc81b2ca58b842bab2583d46cd8ac1dc
msgid "Apache webfinger configuration for a top level domain"
msgstr ""

#: ../tutorial/deployment.rst:191
#: b9b3713c6f724e5cb3cad50756e8211c
msgid "Create the first user"
msgstr ""

#: ../tutorial/deployment.rst:193
#: 02df7f55e6df4452ac60d899b5a98cc2
msgid "Once canaille is installed, soon enough you will need to add users. To create your first user you can use the :ref:`canaille create <cli_create>` CLI."
msgstr ""
