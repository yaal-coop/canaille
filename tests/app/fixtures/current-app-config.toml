# The Flask SECRET_KEY configuration setting.
#
# You MUST set a value before deploying in production.
# SECRET_KEY =
SECRET_KEY = "very-secret"

# The Flask SERVER_NAME configuration setting.
#
# This sets domain name on which canaille will be served.
# SERVER_NAME =
SERVER_NAME = "canaille.test"

# The Flask PREFERRED_URL_SCHEME configuration setting.
#
# This sets the url scheme by which canaille will be served.
# PREFERRED_URL_SCHEME = "https"
PREFERRED_URL_SCHEME = "http"

# The Flask DEBUG configuration setting.
#
# This enables debug options.
#
#     This is useful for development but should be absolutely
#     avoided in production environments.
# DEBUG = false

[CANAILLE]
# Your organization name.
#
# Used for display purpose.
# NAME = "Canaille"

# The logo of your organization, this is useful to make your organization
# recognizable on login screens.
# LOGO =
LOGO = "/static/img/canaille-head.webp"

# You favicon.
#
# If unset and LOGO is set, then the logo will be used.
# FAVICON =

# A path to a theme.
#
# See the theming documentation for more details.
# THEME =

# If a language code is set, it will be used for every user.
#
# If unset, the language is guessed according to the users browser.
# LANGUAGE =

# The timezone in which datetimes will be displayed to the users (e.g. CEST).
#
# If unset, the server timezone will be used.
# TIMEZONE =
TIMEZONE = "UTC"

# A Sentry (https://sentry.io) DSN to collect the exceptions.
#
# This is useful for tracking errors in test and production environments.
# SENTRY_DSN =

# Enables Javascript to smooth the user experience.
# JAVASCRIPT = true
JAVASCRIPT = false

# Accelerates webpages loading with asynchronous requests.
# HTMX = true

# If True, users will need to click on a confirmation link sent by email when they
# want to add a new email.
#
# By default, this is true if SMTP is configured, else this is false. If
# explicitly set to true and SMTP is disabled, the email field will be read-only.
# EMAIL_CONFIRMATION = true

# If True, then users can freely create an account at this instance.
#
# If email verification is available, users must confirm their email before the
# account is created.
# ENABLE_REGISTRATION = false

# If True, when users try to sign in with an invalid login, a message is shown
# indicating that the password is wrong, but does not give a clue whether the
# login exists or not.
#
# If False, when a user tries to sign in with an invalid login, a message is shown
# indicating that the login does not exist.
# HIDE_INVALID_LOGINS = true

# If False, then users cannot ask for a password recovery link by email.
# ENABLE_PASSWORD_RECOVERY = true

# If True, then users will have to wait for an increasingly long time between each
# failed login attempt.
# ENABLE_INTRUDER_LOCKOUT = false

# If OTP_METHOD is defined, then users will need to authenticate themselves using
# a one-time password (OTP) via an authenticator app. If set to TOTP, the
# application will use time one-time passwords, If set to HOTP, the application
# will use HMAC-based one-time passwords.
# OTP_METHOD =

# If True, then users will need to authenticate themselves via a one-time password
# sent to their primary email address.
# EMAIL_OTP = false

# If True, then users will need to authenticate themselves via a one-time password
# sent to their primary phone number.
# SMS_OTP = false

# The validity duration of registration invitations, in seconds.
#
# Defaults to 2 days.
# INVITATION_EXPIRATION = 172800

# User password minimum length.
#
# If 0 or None, password won't have a minimum length.
# MIN_PASSWORD_LENGTH = 8

# User password maximum length.
#
# There is a technical of 4096 characters with the SQL backend. If the value is 0,
# None, or greater than 4096, then 4096 will be retained.
# MAX_PASSWORD_LENGTH = 1000

# Administration email contact.
#
# In certain special cases (example : questioning about password corruption), it
# is necessary to provide an administration contact email.
# ADMIN_EMAIL =
ADMIN_EMAIL = "admin_default_mail@mydomain.test"

# If True, Canaille will check if passwords appears in compromission databases
# such as HIBP (https://haveibeenpwned.com) when users choose a new one.
# ENABLE_PASSWORD_COMPROMISSION_CHECK = false

# Have i been pwned api url for compromission checks.
# PASSWORD_COMPROMISSION_CHECK_API_URL = "https://api.pwnedpasswords.com/range/"
PASSWORD_COMPROMISSION_CHECK_API_URL = "https://api.pwnedpasswords.test/range/"

# Password validity duration.
#
# If set, user passwords expire after this delay. Users are forced to change their
# password when the lifetime of the password is over. The duration value is
# expressed in ISO8601 format (https://en.wikipedia.org/wiki/ISO_8601#Durations).
# For example, delay of 60 days is written "P60D".
# PASSWORD_LIFETIME =

# Configures the logging output using the python logging configuration format:
#
# - If None, everything is logged in the standard error output.
#   The log level is DEBUG if the DEBUG
#   setting is True, else this is INFO.
# - If this is a dict, it is passed to logging.config.dictConfig:
# - If this is a str, it is expected to be a file path that will be passed
#   to logging.config.fileConfig.
#
# For example:
#
#     [CANAILLE.LOGGING]
#     version = 1
#     formatters.default.format = "[%(asctime)s] - $(ip)s - %(levelname)s in %(module)s: %(message)s"
#     root = {level = "INFO", handlers = ["canaille"]}
#
#     [CANAILLE.LOGGING.handlers.canaille]
#     class = "logging.handlers.WatchedFileHandler"
#     filename = "/var/log/canaille.log"
#     formatter = "default"

[CANAILLE.LOGGING]
version = 1
disable_existing_loggers = false

[CANAILLE.LOGGING.formatters]
default = {format = "[%(asctime)s] - %(ip)s - %(levelname)s in %(module)s: %(message)s"}

[CANAILLE.LOGGING.handlers]
wsgi = {class = "logging.StreamHandler", stream = "ext://sys.stdout", formatter = "default"}

[CANAILLE.LOGGING.loggers]
faker = {level = "WARNING"}

[CANAILLE.LOGGING.loggers.canaille]
level = "DEBUG"
handlers = ["wsgi"]

# The settings related to SMTP and mail configuration.
#
# If unset, mail-related features like password recovery won't be enabled.

[CANAILLE.SMTP]
# The SMTP host.
# HOST = "localhost"

# The SMTP port.
# PORT = 25

# Whether to use TLS to connect to the SMTP server.
# TLS = false
TLS = true

# Whether to use SSL to connect to the SMTP server.
# SSL = false

# The SMTP login.
# LOGIN =
LOGIN = "user"

# The SMTP password.
# PASSWORD =
PASSWORD = "password"

# The sender for Canaille mails.
#
# Some mail provider might require a valid sender address.
# FROM_ADDR =
FROM_ADDR = "admin@mydomain.test"

# The settings related to SMPP configuration.
#
# If unset, sms-related features like sms one-time passwords won't be enabled.

[CANAILLE.SMPP]
# The SMPP host.
# HOST = "localhost"

# The SMPP port. Use 8775 for SMPP over TLS (recommended).
# PORT = 2775

# The SMPP login.
# LOGIN =
LOGIN = "user"

# The SMPP password.
# PASSWORD =
PASSWORD = "user"

# Mapping of permission groups. See ACLSettings for more details.
#
# The ACL name can be freely chosen. For example:
#
#     [CANAILLE.ACL.DEFAULT]
#     PERMISSIONS = ["edit_self", "use_oidc"]
#     READ = ["user_name", "groups"]
#     WRITE = ["given_name", "family_name"]
#
#     [CANAILLE.ACL.ADMIN]
#     WRITE = ["user_name", "groups"]

[CANAILLE.ACL.DEFAULT]

# A list of User attributes that users in the ACL will be able to read.
READ = ["user_name", "groups"]

# A list of User attributes that users in the ACL will be able to edit.
WRITE = [
    "emails",
    "given_name",
    "photo",
    "family_name",
    "display_name",
    "password",
    "phone_numbers",
    "formatted_address",
    "street",
    "postal_code",
    "locality",
    "region",
    "employee_number",
    "department",
    "preferred_language",
    "title",
    "organization",
    "lock_date",
]

# FILTER can be:
#
# - None, in which case all the users will match this access control
# - a mapping where keys are user attributes name and the values those user
#   attribute values. All the values must be matched for the user to be part
#   of the access control.
# - a list of those mappings. If a user values match at least one mapping,
#   then the user will be part of the access control
#
# Here are some examples:
#
#     FILTER = {user_name = 'admin'}
#     FILTER = [
#         {groups = 'admins},
#         {groups = 'moderators'},
#     ]
# FILTER =

[CANAILLE.ACL.ADMIN]
# A list of Permission users in the access control will be able to manage.
#
# For example:
#
#     PERMISSIONS = [
#         "manage_users",
#         "manage_groups",
#         "manage_oidc",
#         "delete_account",
#         "impersonate_users",
#     ]
PERMISSIONS = [
    "manage_users",
    "manage_groups",
    "manage_oidc",
    "delete_account",
    "impersonate_users",
]

# A list of User attributes that users in the ACL will be able to edit.
WRITE = ["groups", "lock_date"]

# FILTER can be:
#
# - None, in which case all the users will match this access control
# - a mapping where keys are user attributes name and the values those user
#   attribute values. All the values must be matched for the user to be part
#   of the access control.
# - a list of those mappings. If a user values match at least one mapping,
#   then the user will be part of the access control
#
# Here are some examples:
#
#     FILTER = {user_name = 'admin'}
#     FILTER = [
#         {groups = 'admins},
#         {groups = 'moderators'},
#     ]
FILTER = [
    {user_name = "admin"},
    {family_name = "admin"},
]

[CANAILLE.ACL.MODERATOR]
# A list of Permission users in the access control will be able to manage.
#
# For example:
#
#     PERMISSIONS = [
#         "manage_users",
#         "manage_groups",
#         "manage_oidc",
#         "delete_account",
#         "impersonate_users",
#     ]
PERMISSIONS = ["manage_users", "manage_groups", "delete_account"]

# A list of User attributes that users in the ACL will be able to edit.
WRITE = ["groups"]

# FILTER can be:
#
# - None, in which case all the users will match this access control
# - a mapping where keys are user attributes name and the values those user
#   attribute values. All the values must be matched for the user to be part
#   of the access control.
# - a list of those mappings. If a user values match at least one mapping,
#   then the user will be part of the access control
#
# Here are some examples:
#
#     FILTER = {user_name = 'admin'}
#     FILTER = [
#         {groups = 'admins},
#         {groups = 'moderators'},
#     ]
FILTER = [
    {user_name = "moderator"},
    {family_name = "moderator"},
]

[CANAILLE_SQL]
# The SQL server URI. For example:
#
#     DATABASE_URI = "postgresql://user:password@localhost/database_name"
# DATABASE_URI =
DATABASE_URI = "sqlite:///canaille.sqlite"

# Password hashing scheme.
#
# Defines password hashing scheme in SQL database. examples : "mssql2000",
# "ldap_salted_sha1", "pbkdf2_sha512"
# PASSWORD_SCHEMES = "pbkdf2_sha512"

# Whether to automatically apply database migrations.
#
# If True, database migrations will be automatically applied when Canaille web
# application is launched. If False, migrations must be applied manually with
# canaille db upgrade.
#
#     When running the CLI, migrations will never be applied.
# AUTO_MIGRATE = true

[CANAILLE_LDAP]
# The LDAP server URI.
# URI = "ldap://localhost"

# The LDAP root DN.
# ROOT_DN = "dc=example,dc=org"

# The LDAP bind DN.
# BIND_DN = "cn=admin,dc=example,dc=org"

# The LDAP bind password.
# BIND_PW = "admin"

# The LDAP connection timeout.
# TIMEOUT = 0.0

# The LDAP node under which users will be looked for and saved.
#
# For instance `ou=users,dc=example,dc=org`.
# USER_BASE =
USER_BASE = "ou=users,dc=example,dc=org"

# The attribute to identify an object in the User DN.
# USER_RDN = "uid"

# Filter to match users on sign in.
#
# For instance (|(uid={{ login }})(mail={{ login }})). Jinja syntax is supported
# and a login variable is available, containing the value passed in the login
# field.
# USER_FILTER = "(|(uid={{ login }})(mail={{ login }}))"

# The LDAP node under which groups will be looked for and saved.
#
# For instance `"ou=groups,dc=example,dc=org"`.
# GROUP_BASE =
GROUP_BASE = "ou=groups,dc=example,dc=org"

# The object class to use for creating new groups.
# GROUP_CLASS = "groupOfNames"

# The attribute to identify an object in the Group DN.
# GROUP_RDN = "cn"

# The attribute to use to identify a group.
# GROUP_NAME_ATTRIBUTE = "cn"

[CANAILLE_OIDC]
# Whether a token is needed for the RFC7591 dynamical client registration.
#
# If True, no token is needed to register a client. If False, dynamical client
# registration needs a token defined in DYNAMIC_CLIENT_REGISTRATION_TOKENS.
# DYNAMIC_CLIENT_REGISTRATION_OPEN = false

# A list of tokens that can be used for dynamic client registration.
# DYNAMIC_CLIENT_REGISTRATION_TOKENS =

# Force the nonce exchange during the authentication flows.
#
# This adds security but may not be supported by all clients.
# REQUIRE_NONCE = true

# JSON Web Token settings.

[CANAILLE_OIDC.JWT]
# The private key.
#
# If None and debug mode is enabled, then an in-memory key will be used.
# PRIVATE_KEY =

# The public key.
#
# If None and debug mode is enabled, then an in-memory key will be used.
# PUBLIC_KEY =

# The URI of the identity provider.
# ISS =

# The key type.
# KTY = "RSA"

# The key algorithm.
# ALG = "RS256"

# The time the JWT will be valid, in seconds.
# EXP = 3600

[CANAILLE_OIDC.JWT.MAPPING]
# SUB = "{{ user.user_name }}"

# NAME = "{% if user.formatted_name %}{{ user.formatted_name }}{% endif %}"

# PHONE_NUMBER = "{% if user.phone_numbers %}{{ user.phone_numbers[0] }}{% endif %}"

# EMAIL = "{% if user.preferred_email %}{{ user.preferred_email }}{% endif %}"

# GIVEN_NAME = "{% if user.given_name %}{{ user.given_name }}{% endif %}"

# FAMILY_NAME = "{% if user.family_name %}{{ user.family_name }}{% endif %}"

# PREFERRED_USERNAME = "{% if user.display_name %}{{ user.display_name }}{% endif %}"

# LOCALE = "{% if user.preferred_language %}{{ user.preferred_language }}{% endif %}"

# ADDRESS = "{% if user.formatted_address %}{{ user.formatted_address }}{% endif %}"

# PICTURE = "{% if user.photo %}{{ url_for('core.account.photo', user=user, field='photo', _external=True) }}{% endif %}"

# WEBSITE = "{% if user.profile_url %}{{ user.profile_url }}{% endif %}"

[CANAILLE_SCIM]
# ENABLE_SERVER = true
